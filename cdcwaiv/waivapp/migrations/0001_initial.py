# Generated by Django 5.0.14 on 2025-05-19 17:34

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CaseStatusInfo',
            fields=[
                ('case_status_code', models.CharField(max_length=10, primary_key=True, serialize=False)),
                ('case_description', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='DorCounselor',
            fields=[
                ('dor_counselor_id', models.AutoField(primary_key=True, serialize=False)),
                ('dor_counselor_name', models.CharField(max_length=100)),
                ('dor_counselor_email', models.EmailField(max_length=254)),
            ],
        ),
        migrations.CreateModel(
            name='WaivServiceInfo',
            fields=[
                ('service_type', models.IntegerField(primary_key=True, serialize=False)),
                ('service_description', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='WaivUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('position', models.CharField(choices=[('counselor', 'Counselor'), ('case_manager', 'Case Manager')], default='counselor', max_length=30)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='MonthlyClientListingLog',
            fields=[
                ('participant_id', models.CharField(db_column='participant_id', max_length=20, primary_key=True, serialize=False, unique=True)),
                ('fund_begin_date', models.DateField()),
                ('fund_end_date', models.DateField(blank=True, null=True)),
                ('district', models.CharField(max_length=100)),
                ('updated_date', models.DateField(auto_now_add=True)),
                ('case_status_code', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='waivapp.casestatusinfo')),
                ('dor_counselor', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='waivapp.dorcounselor')),
            ],
        ),
        migrations.CreateModel(
            name='StudentPersonalInfo',
            fields=[
                ('csulb_id', models.CharField(db_column='csulb_id', max_length=15, primary_key=True, serialize=False)),
                ('participant_id', models.CharField(db_column='participant_id', max_length=15, unique=True)),
                ('last_name', models.CharField(max_length=100)),
                ('first_name', models.CharField(max_length=100)),
                ('birthdate', models.DateField()),
                ('email', models.EmailField(max_length=254)),
                ('phone', models.CharField(max_length=20)),
                ('employ_goal', models.CharField(max_length=255)),
                ('city', models.CharField(max_length=100)),
                ('enrollment_date', models.DateField()),
                ('intake_status', models.BooleanField()),
                ('disability_type', models.CharField(blank=True, choices=[('mental', 'Mental'), ('physical', 'Physical'), ('neurological', 'Neurological'), ('combination', 'Combination')], max_length=12, null=True)),
                ('disability_detail', models.TextField(blank=True, null=True)),
                ('updated_date', models.DateTimeField(auto_now_add=True)),
                ('case_manager', models.ForeignKey(blank=True, limit_choices_to={'position': 'case_manager'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='managed_students', to=settings.AUTH_USER_MODEL)),
                ('dedicated_staff', models.ForeignKey(blank=True, limit_choices_to={'position': 'counselor'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='dedicated_students', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='StudentLog',
            fields=[
                ('log_id', models.AutoField(primary_key=True, serialize=False)),
                ('updated_date', models.DateTimeField(auto_now_add=True)),
                ('case_status_code', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='waivapp.casestatusinfo')),
                ('csulb_id', models.ForeignKey(db_column='csulb_id', on_delete=django.db.models.deletion.CASCADE, to='waivapp.studentpersonalinfo')),
            ],
        ),
        migrations.CreateModel(
            name='StudentAcademicLog',
            fields=[
                ('academic_log_id', models.AutoField(primary_key=True, serialize=False)),
                ('academic_plan', models.CharField(blank=True, max_length=100, null=True)),
                ('academic_level', models.CharField(blank=True, max_length=50, null=True)),
                ('gpa', models.DecimalField(blank=True, decimal_places=2, max_digits=4, null=True)),
                ('academic_updated', models.DateTimeField(auto_now_add=True)),
                ('csulb_id', models.ForeignKey(db_column='csulb_id', on_delete=django.db.models.deletion.CASCADE, to='waivapp.studentpersonalinfo')),
            ],
        ),
        migrations.CreateModel(
            name='CounselingLog',
            fields=[
                ('counsel_log_id', models.AutoField(primary_key=True, serialize=False)),
                ('date_checkin', models.DateField()),
                ('case_note', models.TextField()),
                ('updated_date', models.DateTimeField(auto_now_add=True)),
                ('staff', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sessions', to=settings.AUTH_USER_MODEL)),
                ('csulb_id', models.ForeignKey(blank=True, db_column='csulb_id', null=True, on_delete=django.db.models.deletion.CASCADE, to='waivapp.studentpersonalinfo')),
                ('service_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='waivapp.waivserviceinfo')),
            ],
        ),
        migrations.CreateModel(
            name='StudentDoc',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('doc_name', models.CharField(choices=[('waivreferral', 'WAIV Referral Form'), ('dr260', 'DR 260 – Consent To Release'), ('dr215', 'DR 215 – Individualized Plan Employment (IPE)'), ('dr222', 'DR 222 – VR Services Application'), ('casenote', 'Case Note Authorization')], max_length=20)),
                ('received_date', models.DateField(blank=True, null=True)),
                ('expiry_date', models.DateField(blank=True, null=True)),
                ('csulb_id', models.ForeignKey(db_column='csulb_id', on_delete=django.db.models.deletion.CASCADE, to='waivapp.studentpersonalinfo')),
            ],
            options={
                'ordering': ['csulb_id', 'doc_name'],
                'unique_together': {('csulb_id', 'doc_name')},
            },
        ),
    ]
